{
  "language": "Solidity",
  "sources": {
    "contracts/NoticeBoard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract NoticeBoard {\n  \naddress public owner1;\n    address public owner2;\n    uint256 public id;\n\n    event NewInitiateTransaction(address _to, address _from, uint256 _amount);\n    event NewWithdraw(address _to, uint256 _amount);\n    struct Transaction {\n        address payable to;\n        uint256 amount;\n        bool signedByOwnerOne;\n        bool signedByOwnerTwo;\n    }\n    Transaction[] public transactions;\n\n    constructor() {\n        owner1 = address(0xd5322d50306678192DfE85ca9D062d3e0D7ACAa9);\n        owner2 = address(0xF9E13e516794d2E65aC0dA67A4dFb2A593AB8061);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner1 || msg.sender == owner2);\n        _;\n    }\n\n    function initiateTransaction(address payable _to, uint256 _amount)\n        public\n        onlyOwner\n        returns (uint256)\n    {\n        Transaction memory transaction;\n        transaction.to = _to;\n        transaction.amount = _amount;\n        if (msg.sender == owner1) {\n            transaction.signedByOwnerOne = true;\n        } else {\n            transaction.signedByOwnerTwo = true;\n        }\n        transactions.push(transaction);\n        emit NewInitiateTransaction(_to, msg.sender, _amount);\n        return id++;\n    }\n\n    function approveTransaction(uint256 _id) public onlyOwner {\n        require(_id < transactions.length);\n        if (msg.sender == owner1) {\n            transactions[_id].signedByOwnerOne = true;\n        } else {\n            transactions[_id].signedByOwnerTwo = true;\n        }\n        withdraw(_id);\n    }\n\n    function withdraw(uint256 _id) private {\n        require(address(this).balance >= transactions[_id].amount);\n        require(\n            transactions[_id].signedByOwnerOne &&\n                transactions[_id].signedByOwnerTwo\n        );\n        require(transactions[_id].amount != 0);\n        transactions[_id].to.transfer(transactions[_id].amount);\n        transactions[_id].amount = 0;\n        emit NewWithdraw(transactions[_id].to, transactions[_id].amount);\n    }\n\n    receive() external payable {}\n\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function getTransactions() public view returns (Transaction[] memory) {\n        return transactions;\n    }\n  \n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}